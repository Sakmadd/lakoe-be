generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum OrderStatus {
  unpaid
  new_order
  ready_to_ship
  on_delivery
  done
  canceled
}

enum Role {
  seller
  admin
}

model User {
  id       String @id @default(uuid())
  shop_id  String @unique
  name     String @unique
  role     Role   @default(seller)
  email    String
  password String

  Shop Shop @relation(fields: [shop_id], references: [id])

  @@map("users")
}

model Shop {
  id          String  @id @default(uuid())
  phone       String?
  description String?
  slogan      String?
  logo        String?
  balance     Float   @default(0)

  User     User?
  location Location[]
  Product  Product[]
  Withdraw Withdraw[]

  @@map("shops")
}

model Location {
  id          String  @id @default(uuid())
  shop_id     String
  name        String
  address     String
  city        String
  district    String
  postal_code String
  longitude   String
  latitude    String
  is_main     Boolean
  Shop        Shop?   @relation(fields: [shop_id], references: [id])

  @@map("locations")
}

model Product {
  id                       String                     @id @default(uuid())
  shop_id                  String
  category_id              String
  name                     String
  sku                      String
  price                    Float
  url_name                 String
  description              String
  stock                    Int
  weight                   Float
  minimum_order            Int
  is_active                Boolean
  length                   Float
  width                    Float
  height                   Float
  created_at               DateTime                   @default(now())
  updated_at               DateTime                   @default(now())
  OrderItem                OrderItem[]
  Shop                     Shop                       @relation(fields: [shop_id], references: [id])
  Category                 Category                   @relation(fields: [category_id], references: [id])
  Variant                  Variant[]
  Images                   Image[]
  VariantOptionCombination VariantOptionCombination[]

  @@map("products")
}

model Image {
  id         String @id @default(uuid())
  product_id String

  alt     String?
  src     String
  product Product @relation(fields: [product_id], references: [id])

  @@map("images")
}

model Category {
  id        String     @id @default(uuid())
  parent_id String?
  label     String
  value     String
  Parent    Category?  @relation("CategoryToParent", fields: [parent_id], references: [id])
  Children  Category[] @relation("CategoryToParent")
  Product   Product[]

  @@map("categories")
}

model Variant {
  id            String          @id @default(uuid())
  name          String
  is_active     Boolean
  product_id    String
  created_at    DateTime        @default(now())
  updated_at    DateTime        @default(now())
  Product       Product?        @relation(fields: [product_id], references: [id])
  VariantOption VariantOption[]

  @@map("variants")
}

model VariantOption {
  id        String   @id @default(uuid())
  name      String
  Variant   Variant? @relation(fields: [variantId], references: [id])
  variantId String?
  src       String?
  alt       String?

  @@map("variantOptions")
}

model VariantOptionCombination {
  id         String  @id @default(uuid())
  name       String
  is_active  Boolean @default(true)
  price      Float
  weight     Int
  sku        String
  stock      Int
  product_id String
  Product    Product @relation(fields: [product_id], references: [id])

  @@map("variantOptionCombination")
}

model Invoices {
  id            String @id @default(uuid())
  recipient_id  String @unique
  prices        Float
  serviceCharge Float

  invoiceNumber String
  Courier       Courier?
  Payment       Payment?
  Recipient     Recipient      @relation(fields: [recipient_id], references: [id])
  OrderHistory  OrderHistory[]

  @@map("invoices")
}

model OrderHistory {
  id         String      @id @default(uuid())
  invoice_id String
  status     OrderStatus
  timestamp  DateTime    @default(now())

  Invoice Invoices @relation(fields: [invoice_id], references: [id])
}

model Courier {
  id          String   @id @default(uuid())
  invoice_id  String   @unique
  price       Float
  courierCode String
  Invoices    Invoices @relation(fields: [invoice_id], references: [id])

  @@map("couriers")
}

model Order {
  id           String      @id @default(uuid())
  recipient_id String      @unique
  total_price  Float
  created_at   DateTime    @default(now())
  updated_at   DateTime    @default(now())
  OrderItem    OrderItem[]
  Payment      Payment?
  Recipient    Recipient   @relation(fields: [recipient_id], references: [id])

  @@map("orders")
}

model OrderItem {
  id         String  @id @default(uuid())
  order_id   String
  product_id String
  quantity   Int
  Order      Order   @relation(fields: [order_id], references: [id])
  Product    Product @relation(fields: [product_id], references: [id])

  @@map("orderItems")
}

model Recipient {
  id        String    @id @default(uuid())
  name      String
  email     String
  address   String
  phone     String
  district  String
  city      String
  longitude String
  latitude  String
  Order     Order?
  Invoices  Invoices?

  @@map("recipients")
}

model Payment {
  id             String   @id @default(uuid())
  order_id       String   @unique
  invoice_id     String   @unique
  transaction_id String
  type           String
  url            String
  bank           String?
  amount         Float
  account_name   String
  account_number String
  status         String
  created_at     DateTime @default(now())
  updated_at     DateTime @default(now())
  Order          Order    @relation(fields: [order_id], references: [id])
  Invoice        Invoices @relation(fields: [invoice_id], references: [id])

  @@map("payments")
}

model BankAccount {
  id       String     @id @default(uuid())
  name     String
  account  String
  bank     String
  Withdraw Withdraw[]

  @@map("bankAccounts")
}

model Withdraw {
  id              String      @id @default(uuid())
  bank_account_id String
  shop_id         String
  reference_no    String
  amount          Float
  notes           String?
  status          String
  updated_at      DateTime    @default(now())
  created_at      DateTime    @default(now())
  BankAccount     BankAccount @relation(fields: [bank_account_id], references: [id])
  Shop            Shop        @relation(fields: [shop_id], references: [id])

  @@map("withdraws")
}
